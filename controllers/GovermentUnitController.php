<?php

namespace app\controllers;

use app\components\MyHelper;
use app\models\ActionQuery;
use app\models\Branch;
use app\models\BranchGroup;
use app\models\Govermentlevel;
use app\models\PhiscalYear;
use app\models\StatGovermentUnit;
use app\models\StatGovermentUnitDetail;
use app\models\User;
use Yii;
use app\models\GovermentUnit;
use yii\db\ActiveQuery;
use yii\db\Exception;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * GovermentUnitController implements the CRUD actions for GovermentUnit model.
 */
class GovermentUnitController extends Controller
{
    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function actionReport($phiscalyearid) {
        $year = PhiscalYear::find()
            ->where(['id' => $phiscalyearid, 'deleted' => 0])
            ->one();
        if(!isset($year)) return Yii::t('app','Incorrect Phiscal Year');

        $model = StatGovermentUnit::find()
            ->where(['phiscal_year_id' => $year->id])
            ->one();

        $branchgroups = BranchGroup::find()
            ->with([
                'branches' => function (ActiveQuery $query) {
                    $query->andWhere(['deleted' => 0])
                        ->orderBy('id');
                },
            ])
            ->orderBy('id')
            ->all();

        $govermentlevels = Govermentlevel::find()
            ->where(['deleted' => 0])
            ->orderBy('id')
            ->all();

        if(!isset($model)) {
            return'
                <p>'.Yii::t('app', 'No Data').'</p>
                <p>
                    <a class="btn btn-success" href="index.php?r=goverment-unit/create&id='.$year->id.'"><i class="fa fa-pencil fa-2x"></i></a>
                </p>';
        }

        return $this->renderPartial('report', [
            'year' => $year,
            'model' => $model,
            'branchgroups' => $branchgroups,
            'govermentlevels' => $govermentlevels
        ]);
    }

    public function actionCreate($id) {
        $year = PhiscalYear::find()
            ->where(['id' => $id, 'deleted' => 0])
            ->one();
        if(!isset($year))
            Yii::$app->session->setFlash('danger', Yii::t('app','Incorrect Phiscal Year'));

        $model = StatGovermentUnit::find()
            ->where(['phiscal_year_id' => $id])
            ->one();
        if (isset($model))
            return $this->redirect(['update', 'id' => $year->id]);

        $transaction = Yii::$app->db->beginTransaction();
        try {
            $model = new StatGovermentUnit();
            $model->phiscal_year_id = $id;
            $model->last_update = date('Y-m-d H:i:s');
            if (!$model->save())
                throw new Exception(json_encode($model->errors));

            $branches = Branch::find()->where(['deleted' => 0])->orderBy("id")->all();
            $levels = Govermentlevel::find()->where(['deleted' => 0])->orderBy('id')->all();
            foreach ($branches as $branch)
                foreach ($levels as $level) {
                    $detail = new StatGovermentUnitDetail();
                    $detail->branch_id = $branch->id;
                    $detail->goverment_level_id = $level->id;
                    $detail->stat_goverment_unit_id = $model->id;
                    if(!$detail->save()) {
                        throw new Exception(json_encode($detail->errors));
                        $transaction->rollBack();
                    }

                }
            $transaction->commit();
            return $this->redirect(['update', 'id' => $id]);
        } catch (Exception $ex) {
            $transaction->rollBack();
            Yii::$app->session->setFlash('danger', $ex->getMessage());
            return $this->redirect(['index']);
        }
    }

    public function actionUpdate($id) {
        $year = PhiscalYear::find()
            ->where(['id' => $id, 'deleted' => 0])
            ->one();
        if(!isset($year)) {
            Yii::$app->session->setFlash('danger', Yii::t('app','Incorrect Phiscal Year'));
            return $this->redirect(['index']);
        }

        if($year->status != "O") {
            Yii::$app->session->setFlash('danger', Yii::t('app','Phiscal Year is not allowed to input data'));
            return $this->redirect(['index']);
        }

        $model = StatGovermentUnit::find()
            ->with([
                'statGovermentUnitDetails' => function(ActiveQuery $q) {
                $q->orderBy('branch_id, stat_goverment_unit_id');
                }
            ])
            ->where(['phiscal_year_id' => $year->id])
            ->one();
        if(!isset($model)) {
            return $this->redirect(['create', 'id' => $id]);
        }

        $branchgroups = BranchGroup::find()
            ->with([
                'branches' => function (\yii\db\ActiveQuery $query) {
                    $query->andWhere(['deleted' => 0])
                        ->orderBy('position');
                },
            ])
            ->orderBy('position')
            ->all();

        $govermentlevels = Govermentlevel::find()
            ->where(['deleted' => 0])
            ->orderBy('position')
            ->all();

        $post = Yii::$app->request->post();
        if(isset($post['GovermentUnit'])) {
            $model->last_update = date('Y-m-d H:i:s');
            if(!isset($model->user_id))
                $model->user_id = Yii::$app->user->id;

            if(!$model->saved) $model->saved = 1;
            $model->save();

            foreach ($branchgroups as $group)
                foreach ($group->branches as $branch)
                    foreach ($govermentlevels as $level) {
                        if(isset($post['GovermentUnit'][$branch->id][$level->id]))
                            StatGovermentUnitDetail::updateAll([
                                'value' => $post['GovermentUnit'][$branch->id][$level->id]
                            ], "stat_goverment_unit_id=:stat_goverment_unit_id AND branch_id=:branch_id AND goverment_level_id=:goverment_level_id", [
                                ':stat_goverment_unit_id' => $model,
                                ':branch_id' => $branch->id,
                                ':goverment_level_id' => $level->id
                            ]);
                    }
        }

        return $this->render('update', [
            'year' => $year,
            'model' => $model,
            'branchgroups' => $branchgroups,
            'govermentlevels' => $govermentlevels
        ]);

        $post = Yii::$app->request->post();
        if (isset($post)) {
            $model->last_update = date('Y-m-d H:i:s');
            if (!$model->save())
                throw new Exception(json_encode($model->errors));
        }
    }

    public function actionSave() {
        $post = Yii::$app->request->post();
        if(isset($post)) {
            $transaction = Yii::$app->db->beginTransaction();
            try{
                $model = StatGovermentUnit::findOne($post['id']);
                if(!isset($model)) throw new Exception(Yii::t('app', 'Not Found!'));
                $model->last_update = date('Y-m-d H:i:s');
                $model->saved = 1;
                $model->user_id = isset($model->user_id)?$model->user_id: Yii::$app->user->id;
                if(!$model->save()) throw new Exception(json_encode($model->errors));
                $row = 0;
                try {
                    $detail = new StatGovermentUnitDetail();
                    $detail->stat_goverment_unit_id = $model->id;
                    $detail->goverment_level_id = $post['goverment_level_id'];
                    $detail->branch_id = $post['branch_id'];
                    $detail->value = $post['value'];
                    $detail->save();
                    $row = 1;
                } catch (Exception $ex) {
                    $row = StatGovermentUnitDetail::updateAll(["value" => $post['value']],[
                        'branch_id' => $post['branch_id'],
                        'goverment_level_id' => $post['goverment_level_id'],
                        'stat_goverment_unit_id' => $model->id
                    ]);
                }

                if($row == 0) throw new Exception(Yii::t('app', '0 Row Affected'));
                $transaction->commit();
                return json_encode([
                    'user' => $model->user? $model->user->attributes: User::findOne(['id'=>Yii::$app->user->id])->attributes,
                    'last_update' => MyHelper::converttimefordisplay($model->last_update),
                    'status' => Yii::t('app', 'Saved')
                ]);
            } catch (Exception $exception) {
                $transaction->rollBack();
                return json_encode([
                    'error' => $exception->getMessage(),
                    'value' => $post['value']
                ]);
            }
        }
    }

    /**
     * Lists all GovermentUnit models.
     * @return mixed
     */
    public function actionIndex()
    {
        $phiscalyears = PhiscalYear::find()
            ->where(['deleted' => 0])
            ->orderBy('year')
            ->all();
        return $this->render('index', [
            'phiscalyears' => $phiscalyears,
        ]);
    }

    public function actionGet() {
        return json_encode([
            'branchgroups' => BranchGroup::find()->where(['deleted' => 0])->orderBy('id')->asArray()->all(),
            'branches' => Branch::find()->where(['deleted' => 0])->orderBy('id')->asArray()->all(),
            'levels' => Govermentlevel::find()->where(['deleted' => 0])->orderBy('id')->asArray()->all()
        ]);
    }

    /**
     * Finds the GovermentUnit model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return GovermentUnit the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = GovermentUnit::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
